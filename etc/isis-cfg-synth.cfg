# configuration file for singing synthesis parameters :

# default values that are replaced by the parser
#
# %(HOME)s -> users home directory read from the environment variable HOME
# %(ISIS_ROOT)s -> installation root containing the ISiS installation
# %(ISIS_CORPORA)s -> Root dir for ISiS singing corpora initialised from environment variable ISIS_CORPORA
# %(ISIS_CONFIG_DIR)s -> defaults to for  %(ISIS_ROOT)s/config_files/default can be overriden by envionment variable

[globals]
# Root folder where most files created by the synthesis are output:
# This mainly includes the output sound files, some marker files, some analysis file, and some files storing the target parameters
# Some files specified in the "input" section below may however be placed elsewhere.
TEMPFILESPATH: /tmp/ISiS/TEMP/

# Display somes plots with the f0 and loudness curves (see in the code where) if 1 or True:
DO_PLOT: 0

# Displays some informations to the terminal if 1 or True:
verbose : False

# Automatically open the generated sound file at the end of the synthesis
# (along with the f0 curve and phonetic marker file if you use audiosculpt as the default program to open sound files)
auto_open_file: 0

# output file encoding: select from 'pcm16', 'pcm24', 'pcm32', 'alaw', 'ulaw', 'float32', 'float64'
# but respect compatibility with file format which is detected from the output file name and
# if that detection is not clear then defaults to aiff
# out_file_encoding: pcm16
out_file_encoding: float64

# loudnessGainFigFile: lgf.p.gz

[database]
# db_config file containing all tags and analysis parameters for the database:
root_db_config_file: %(ISIS_CORPORA)s/BDD/RT/RT_YM/db_config.py

# tag for sound files (see db_config file in the database):

mic: wav

[input]
# Python module in charge of reading the infos from the input files (score and lyrics)
getInputsModule: Chant.singing_engine.input.getInputs

# Score file: can be a configuration (".cfg"), midi (".mid") or musicXml (".xml") file
# See file default.score.cfg in /singing_engine/config_files/default/ for an example of score in the cfg format
# (".mid" and ".xml" formats have not been extensively tested yet)
scoreFile: %(ISIS_CONFIG_DIR)s/default.score.cfg


## file specifying some diphones to be used (instead of others): NONE or full file's path
selectedUnitsFile: dummy

[control]

controlModule: Chant.singing_engine.control.controlModel

# language : FR = french ; JP = japanese ; EN = english
# LANG: FR
LANG: JP

# 1 if vibrato is to be generated using B-splines. 0 if vibrato is to be generated and a separate curve, as an amplitude-scaled sinusoid.
vibBSplines: 1

# 1 if the splines weights should be optimized to better match the target f0 model parameter than with their default weights from the model
OPTIMIZE: 0

[unitsCreation]

unitCreationModule: Chant.singing_engine.concatSynthEngine.unitSelection

one_shot_units: 0

# use the viterbi algorithm to select the best compatible units according to the euclidian distance of the mfcc at the border of the diphones
# doViterbi: 1
doViterbi: 1

# minimum enveloppe interpolation time around junctions in s:
minEnvInterpTime: 0.1

# minimum vowel's kernel time in s: #should be equal to minEnvInterpTime???
# minKernelLength: 0.05
minKernelLength: 0.05

# allow to cut in (shorten) the selected "non-stable" parts of vowels in diphones for fast speech, instead of only
# using time-stretching to get the target vowel length
allowCoarticulationCuts: 1

# minimum total length of the concatenated segments for a given phoneme, in s:
# minConcatPhonemeLen: 0.2
minConcatPhonemeLen: 0.5

# if min: use by default the minimal duration given by the stable part annotation for the diphones segments. If max, use by default the maximal duration.
# stabPartMode: min
stabPartMode: min

# if 1: Always interpolate envelope on the whole central stable vowel's segment. If 0: only shortly interpolate around junctions
interpOnVowels: 0

# if 1 adapt plosives target duration according to the selected plosives units to reduce
# time manipulation of plosives.
adaptPlosivesDuration : 0

[unitsModification]

unitsModificationModule: Chant.singing_engine.concatSynthEngine.unitsModification

[synth]

# default synthesis engine to be used, can be overriden with --pan/--svp flags
synthModule: Chant.singing_engine.concatSynthEngine.panSynthesisEngine.synthEngine
#synthModule: Chant.singing_engine.concatSynthEngine.svpSynthesisEngine.synthEngine

# Transformations
# 1:Linear; 2:LSFTODO
transformationEnvelopeInterpMethod: 1
# transformationEnvelopeInterpMethod: 2

# A global additive factor
transformationGlobAdd: 0

# Activate, or not, the timbre transformation [0|1]
transformationTimbreFactor: 0.

# A global energy factor, a multiple of [dB]
transformationEnergyFactor: 0.

# duration of the transition for enveloppe interpolation (betatransdur in the code)
envTransDur: 0.1

rdOffset: 0.

rdScaleFactor: 1.

# if set  time scaling will be performed only within the 50% duration around the center of the phonemes
USE_STAB: 1

###########################################
[PAN]

# mode of input envelope to be used. If 'vtf', use the vtf enveloppe computed offline read via the vtf_tag below. If 'env', compute the vtf online from the envelope read via the env_tag below:
panEnvMode: env

# tags of the analysis files to be used 
res_tag: remix
rd_tag: rd
f0_tag: f0h_z
env_tag: env
vtf_tag: vtf
vuf_tag: vuf
loud_tag: loud

# if force rd is set and larger or equal to 0 then it will override the default rd behavior defind in the database files
# If force_rd is 0 the database entries will be used - this is dangerous especially for fmale voices.
# If force_rd is > 0 the rd analysis files are used only for providing pulse positions
# the rd values for the analysis are replaced by a fixed value given by force_rd
force_rd: -1

# rd transformation factor derived from transposition factor t follwing rdnew = rd * t**beta
beta : 0.3

# if set > 0 this parameter will be used to generate pulse ta parameters from the original analysis
# by means of ta_new = ta * t**ta_beta. Default ta_beta = 1 will scale
# the period normalised return time exactly as the transposition
# parameter which will approximately preserve the spectral tilt
ta_beta: 1

# if set > 0 this parameter will be used to modify the ta parameter of the synthesised
# pulse as a function of the linear gain that is applied to
# achieve loudness adaptation
tg_beta: 0.1

# add randomization to unvoiced components in voiced sections
randomize_unv : 1

# jointly transpose env with pitch
# transposition_env_exp : 0.1
# HOW NASAL IT SOUNDS LIKE : 0 very nasal, 0.5 very strong f0 note
transposition_env_exp : 0

###########################################
###########################################
[supervp]

# version of superVP to be used :
SVP_VERSION: svp_float

# shape_invariant mode (1) / normal phase vocoder (0) :
SHAPE_MODE: 1

# interpolation of phase alignments if 1 (else no interpolation if 0) :
PHA_INTERP: 1

# preserve transients (set to 0 if transient processing should be disabled) :
PRESERVE_TRANSIENTS: 1

# DO_CONCAT = 1 if synthesis is made from scratch, 0 if the synthesis has already been run once, and the user want to change only f0, phonemeslength, ...
DO_CONCAT: 1

#use offline/pre-computed (corrected) f0 analysis sdif files:
USE_OFFLINE_F0_ANALYSIS: 1

# use transposition and stretching in two separate stages
twoStageTransformation : 0

# use a fake envelope signal for transposition when twoStageProcessing is enabled
# alternatively the fake envelope is taken into account internally
useFakeEnvelope : 0

##synthesis-related parameters :
# overlap between analysis frames
# overlap: 4
overlap: 4

# ambitus factor for determining windowsize from mean F0 of database
# maxPeriod = 1/(meanF0 * mean2MinF0) :
mean2MinF0: 0.66

# window size is specified in terms of a multiple of the maxperiod
# which itself is determined from ambitus factor mean2MinF0 (see above)
# winSize = winFac * maxPeriod = winFac /(meanF0 * mean2MinF0) 
winFac: 4

# analysis window type :
winType: blackman

# minimum score of the analysed f0 for it to be taken into account:
minF0Score: 0.5

# minimum analysis window size :
minWinSize: 0.015

# transposition mode time, auto, freq
# transpMode: freq
transpMode: freq
